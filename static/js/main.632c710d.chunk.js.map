{"version":3,"sources":["logo.svg","components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","data","name","id","email","className","src","CardList","map","_prop","key","SearchBox","onChange","placeholder","onTextChange","useCallback","e","target","value","trim","type","App","useState","users","setUsers","searchText","setSearchText","useEffect","a","fetch","response","json","userList","fetchUsers","onSearchChange","useMemo","filter","user","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,sLCG9BC,G,kBAAO,SAAC,GAAmC,IAAD,IAAhCC,KAAQC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MACvC,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BH,EAA1B,4BACR,4BAAKD,GACL,2BAAIE,MCJGG,G,MAAW,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACzB,OACE,yBAAKI,UAAU,aACZJ,EAAKO,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMC,IAAKD,EAAMN,GAAIF,KAAMQ,UCLtBE,G,MAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC9BC,EAAeC,uBAAY,SAACC,GAChCJ,EAASI,EAAEC,OAAOC,MAAMC,UACvB,IAEH,OACE,2BACEd,UAAU,SACVe,KAAK,SACLR,SAAUE,EACVD,YAAaA,MC4BJQ,MAnCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIbC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MACrB,8CAFe,cACXC,EADW,gBAIMA,EAASC,OAJf,OAIXC,EAJW,OAKjBR,EAASQ,GALQ,2CAAH,qDAQhBC,KACC,IAEH,IAAMC,EAAiBnB,uBAAY,SAACG,GAClCQ,EAAcR,MAGVjB,EAAOkC,mBAAQ,WACnB,OAAOZ,EAAMa,QAAO,SAACC,GAAD,OAClBA,EAAKnC,KAAKoC,cAAcC,SAASd,EAAWa,oBAE7C,CAACf,EAAOE,IAEX,OACE,yBAAKpB,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWO,SAAUsB,EAAgBrB,YAAY,uBACjD,kBAAC,EAAD,CAAUZ,KAAMA,MCxBFuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.632c710d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport const Card = ({ data: { name, id, email } }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img src={`https://robohash.org/${id}?set=set2&size=180x180`} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../Card/Card\";\r\nimport \"./CardList.css\";\r\n\r\nexport const CardList = ({ data }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {data.map((_prop) => (\r\n        <Card key={_prop.id} data={_prop} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\nexport const SearchBox = ({ onChange, placeholder }) => {\r\n  const onTextChange = useCallback((e) => {\r\n    onChange(e.target.value.trim());\r\n  }, []);\r\n\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      onChange={onTextChange}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect, useState, useCallback, useMemo } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/CardList/CardList\";\nimport { SearchBox } from \"./components/SearchBox/SearchBox\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      const userList = await response.json();\n      setUsers(userList);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const onSearchChange = useCallback((value) => {\n    setSearchText(value);\n  });\n\n  const data = useMemo(() => {\n    return users.filter((user) =>\n      user.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n  }, [users, searchText]);\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox onChange={onSearchChange} placeholder=\"Search Monsters...\" />\n      <CardList data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}